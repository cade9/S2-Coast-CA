// -------------------------- SCRIPT INTRODUCTION --------------------------
/* 
// Authors: Christiana Ade and Katie Osborn
// Purpose: This script imports the pre-trained random forest model (from 01_BuildClassifier), applies it to the CA coast, 
         // smooths the classification, and exports the results in vector format in batches.
// Steps: (1) Import trained classifier
//        (2) Import boxes for batch exporting sections of the CA coast
//        (3) Make a coastal mosaic from selected tiles
//        (4) Apply the classifier to the CA coast
//        (5) Smooth the classification
//        (6) Vectorize and export with 10 different boxes (users can create new boxes)
// 

// User input (Below): 
      Required: 
        (1) Previously created random forest classifier
        (2) Pre-drawn boxes of type FeatureCollection
        (3) folder location and other variables below
      Optional:
        (1): Individual shapefiles of CARI Beaches, Dunes, and Rocky shore for visualization

// Outputs to google drive: 
        (1) Classification rasters with no visualzation applied (file ending: "_smoothed_noviz" )
        (2) Classification rasters with  visualzation applied (file ending: "_smoothed_v2" )
        (3) Polygon geojson files (file name poly.*_scale)
   

  */ 
// -------------------------- USER INPUT VARIABLES --------------------------

// Path to the decision tree asset (imported pre-trained model)
var RF_decision_trees = 'users/yourGEEusername/RF_decision_trees'; // Input the directory to your RF_decision_trees asset

// Folder for exported results
var out_dir = 'your/folder/output/path/here'; // Change to your folder path

// Define scales for converting from raster data to vector
    // The scale affects the precision and size of the vector features that are generated
    // Current settings export at a scale of 5 and 10 for comparison
var scale_list = ee.List.sequence(5, 10, 5); // list of scale values and increment
var scale_list_str = ee.List(['5', '10']); // scale values in string format
var scale_n = 2; // number of scales in list

var box_n = 10; // number of boxes along the coast. 
                  // NOTE: You do not need to change this unless you want to look at an area other than the CA coast
                  // or only export certain areas.


///

// -------------------------- PRE-DEFINED BOX FEATURE COLLECTIONS --------------------------
// These are pre-defined box areas that are drawn simply to split the coast up into different
// sections for export. Box locations are arbitrary, but boxes must be small enough for export.
/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var coast_bound = ee.FeatureCollection("users/Cade92/OPC_coastalZone"),
    beaches = ee.FeatureCollection("users/Cade92/CARI_V1_beach"),
    dune = ee.FeatureCollection("users/Cade92/Dune"),
    rocky = ee.FeatureCollection("users/Cade92/Rocky"),
    box1 = 
    /* color: #98ff00 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-124.4827508553622, 41.98628329046639],
                  [-124.4827508553622, 40.0210337701682],
                  [-123.95884033290126, 40.0210337701682],
                  [-123.95884033290126, 41.98628329046639]]], null, false),
            {
              "system:index": "0"
            })]),
    box2 = 
    /* color: #0b4a8b */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-124.16243072596767, 40.09251037927842],
                  [-124.16243072596767, 38.66861600444086],
                  [-123.51492401210048, 38.66861600444086],
                  [-123.51492401210048, 40.09251037927842]]], null, false),
            {
              "system:index": "0"
            })]),
    box3 = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-122.7525245299475, 38.44036252315006],
                  [-122.7525245299475, 37.78341747534844],
                  [-121.186972772135, 37.78341747534844],
                  [-121.186972772135, 38.44036252315006]]], null, false),
            {
              "system:index": "0"
            })]),
    box4 = 
    /* color: #98ff00 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-122.34229124422508, 37.12823224698578],
                  [-122.34229124422508, 35.257608167158175],
                  [-120.58447874422508, 35.257608167158175],
                  [-120.58447874422508, 37.12823224698578]]], null, false),
            {
              "system:index": "0"
            })]),
    box5 = 
    /* color: #0b4a8b */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-121.04329889597363, 35.3053259800775],
                  [-121.04329889597363, 34.38566927074785],
                  [-118.32967584909863, 34.38566927074785],
                  [-118.32967584909863, 35.3053259800775]]], null, false),
            {
              "system:index": "0"
            })]),
    box6 = 
    /* color: #ffc82d */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-118.64827936472363, 33.9220025944097],
                  [-118.64827936472363, 32.54363638183047],
                  [-116.54989069284863, 32.54363638183047],
                  [-116.54989069284863, 33.9220025944097]]], null, false),
            {
              "system:index": "0"
            })]),
    box7 = 
    /* color: #00ffff */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.6643897643225, 38.81799311236865],
                  [-123.6643897643225, 37.92221246522719],
                  [-122.5877296080725, 37.92221246522719],
                  [-122.5877296080725, 38.81799311236865]]], null, false),
            {
              "system:index": "0"
            })]),
    box8 = 
    /* color: #bf04c2 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-122.66967549000911, 37.88037893910722],
                  [-122.66967549000911, 37.06953011900059],
                  [-121.16454853688411, 37.06953011900059],
                  [-121.16454853688411, 37.88037893910722]]], null, false),
            {
              "system:index": "0"
            })]),
    box9 = 
    /* color: #ff0000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-119.56759255446487, 34.475080190480654],
                  [-119.56759255446487, 33.71085075667993],
                  [-117.76583474196487, 33.71085075667993],
                  [-117.76583474196487, 34.475080190480654]]], null, false),
            {
              "system:index": "0"
            })]),
    box10 = 
    /* color: #00ff00 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-120.46995679943248, 34.107897604695346],
                  [-120.46995679943248, 33.889300361424965],
                  [-119.27794019786998, 33.889300361424965],
                  [-119.27794019786998, 34.107897604695346]]], null, false),
            {
              "system:index": "0"
            })]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// Define boxes for batch exporting. You need to export by smaller areas to avoid export errors.
    // NOTE: You do not need to change this unless you want to look at an area other than the CA coast
    // or only export certain areas. Name field is added for file export unique identifier, please leave the same
var box1 = box1.map(function(feature) {
  return feature.set('name', 'area1')
});
var box2 = box2.map(function(feature) {
  return feature.set('name', 'area2')
});
var box3 = box3.map(function(feature) {
  return feature.set('name', 'area3')
});
var box4 = box4.map(function(feature) {
  return feature.set('name', 'area4')
});
var box5 = box5.map(function(feature) {
  return feature.set('name', 'area5')
});
var box6 = box6.map(function(feature) {
  return feature.set('name', 'area6')
});
var box7 = box7.map(function(feature) {
  return feature.set('name', 'area7')
});
var box8 = box8.map(function(feature) {
  return feature.set('name', 'area8')
});
var box9 = box9.map(function(feature) {
  return feature.set('name', 'area9')
});
var box10 = box10.map(function(feature) {
  return feature.set('name', 'area10')
});

// merge boxes
var crop_boxes = box1.merge(box2).merge(box3).merge(box4).merge(box5)
                .merge(box6).merge(box7).merge(box8).merge(box9).merge(box10);

// ----------------------- TILE SELECTION ------------------------------------

// List of Sentinel-2 tiles for classification
var tiles = [  
  "20220224T191349_20220224T191924_T10TCM",
  "20220308T190231_20220308T190635_T10TDL", 
  "20220520T190921_20220520T191647_T10TCL",
  "20220224T191349_20220224T191924_T10TCK",  
  "20220522T185919_20220522T190752_T10TDK",
  "20220308T190231_20220308T190635_T10SDJ",
  "20220308T190231_20220308T190635_T10SDH",
  "20220310T185109_20220310T190102_T10SEG",
  "20220223T185401_20220223T190247_T10SEH", 
  "20220310T185109_20220310T190102_T10SEF",
  "20220310T185109_20220310T190102_T10SFF", 
  "20220310T185109_20220310T190102_T10SFE",
  "20221112T184619_20221112T184620_T10SGD",
  "20220511T183921_20220511T185047_T10SGC",
  "20220225T184339_20220225T184402_T11SKU",
  "20220210T184521_20220210T185123_T11SKT",
  "20220423T182909_20220423T184417_T11SLT",
  "20220312T184151_20220312T185510_T11SKS",
  "20221219T183759_20221219T183759_T11SLS",
  "20221219T183759_20221219T183759_T11SMT",
  "20220123T183649_20220123T183643_T11SMS"
];

// ------------------- FILTER SENTINEL-2 DATASET -----------------------------

// Filter the Sentinel-2 image collection by date, selected tiles, and location
var S2 = ee.ImageCollection("COPERNICUS/S2_SR")
    .filterDate('2022-01-01', '2022-12-31')
    .filter(ee.Filter.inList('system:index', tiles))        
    .filterBounds(coast_bound);

// ------------------- VEGETATION INDICES FUNCTIONS -------------------------

// Function to compute various vegetation indices for a given image
var compute_indices = function(image) {
  var ndvi = image.expression('(NIR-Red)/(NIR+Red)', {
    'NIR': image.select('B8'),
    'Red': image.select('B4')
  }).rename('ndvi');
  
  var ndwi = image.expression('(G-NIR)/(G+NIR)', {
    'NIR': image.select('B8'),
    'G': image.select('B3')
  }).rename('ndwi');
   
  var savi = image.expression('((NIR - RED) / (NIR + RED + L) * (1 + L))', {
    'NIR': image.select('B8'),
    'RED': image.select('B4'),
    'L': 0.5
  }).rename('savi'); 

  var ndwi2 = image.expression('(NIR-SWIR)/(SWIR+NIR)', {
    'NIR': image.select('B8'),
    'SWIR': image.select('B11')
  }).rename('ndwi2');
  
  var mndwi = image.expression('(G-SWIR1)/(G+SWIR1)', {
    'G': image.select('B3'),
    'SWIR1': image.select('B11')
  }).rename('mndwi');
   
  return image.addBands([ndvi, ndwi, savi, ndwi2, mndwi]);
};

// ------------------- CREATE MOSAIC AND COMPOSITE ----------------------------

var mosaic1 = S2.mosaic().clip(coast_bound).select('B.*').clip(coast_bound);
var imageVisParam = {"opacity":1,"bands":["B8","B4","B3"],"min":0,"max":3000,"gamma":0.5};
Map.addLayer(mosaic1, imageVisParam, 'spatial mosaic', false);

// Generate composite image with indices
var s2_input_imgs = compute_indices(mosaic1);
var bands = ['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B11', 'B12', 'ndvi', 'ndwi', 'savi', 'ndwi2', 'mndwi'];

// ------------------------ CLASSIFICATION -----------------------------------

// Decode and apply the decision trees to classify the image
var rfModel = ee.FeatureCollection(RF_decision_trees);
var decisionTrees = decodeFeatureCollection(rfModel);
var classifier = ee.Classifier.decisionTreeEnsemble(decisionTrees);
var classification = s2_input_imgs.classify(classifier);
Map.addLayer(classification, {min: 0, max: 4, palette: ['yellow', 'red', 'green', 'blue', 'white']}, 'Classified Image', false);

// Function to decode decision tree feature collection
function decodeFeatureCollection(featureCollection) {
  return featureCollection
    .map(function (feature) {
      var dict = feature.toDictionary();
      var keys = dict.keys().map(function (key) {
        return ee.Number.parse(ee.String(key));
      });
      var value = dict.values().sort(keys).join();
      return ee.Feature(null, {value: value});
    })
    .aggregate_array('value')
    .join()
    .decodeJSON();
}

// ------------------------ SMOOTHING AND REMAPPING --------------------------
// Square smoothing window of 2 pixels on classifier 
var imgSmooth = classification.focalMode(2, 'square');
Map.addLayer(img_smooth, {min: 0, max: 4, palette: ['yellow', 'red', 'green', 'blue', 'white']}, 'Smoothed Classification');

// Remove all classes besides beach and rocky shore 
// Beaches pixels will change from value 0 -> 1  and rocky 1 -> 2 and all other classes will be 0.
var fromList = [0, 1, 2, 3, 4];
var toList = [1, 2, 0, 0, 0];
// Apply remmapping
var imgRemap = imgSmooth.remap({from: fromList, to: toList, defaultValue: 0});

// Create and apply mask to remove pixels with value 0 
var mask = imgRemap.neq(0);
var maskedClass = imgRemap.updateMask(mask);
Map.addLayer(maskedClass, {min: 1, max: 2, palette: ['yellow', 'red']}, 'Masked Classification');

// -------------------- VECTORIZE AND EXPORT IMAGES -------------------------


// Loop through each box and export classified results

for(var f=0; f<box_n; f++) {
  
  var car = ee.Image(classification).select(['classification'])
  var projection = car.projection().getInfo();
  var class_viz = {min: 0, max: 4, palette: ['yellow', 'red', 'green', 'blue', 'white']} 
  var feat_sub = ee.Feature(crop_boxes.toList(box_n).get(f));
  var feature_name = 'class_' + feat_sub.get('name').getInfo()

  var car_smooth = ee.Image(imgSmooth).select(['classification'])
  var class_viz = {min: 0, max: 4, palette: ['yellow', 'red', 'green', 'blue', 'white']} 
  var feat_sub = ee.Feature(crop_boxes.toList(box_n).get(f));
  var feature_name_smooth = 'class_' + feat_sub.get('name').getInfo() + "_smoothed_v2"
  
  // Export the smoothed and visualized image to Google Drive as a GeoTIFF
  Export.image.toDrive({
      image: car_smooth.visualize(class_viz),
      folder: out_dir,
      scale:10,
      description: feature_name_smooth,
      region: feat_sub,
      fileFormat: 'GeoTIFF',
      // formatOptions: {
      //   cloudOptimized: true
      // },
        maxPixels:  1e13
    })
    
  // Export the smoothed classification without any visualization
  // This export will contain the raw classification values, useful for further analysis
  var feature_name_smooth = 'class_' + feat_sub.get('name').getInfo() + "_smoothed_noviz"

  Export.image.toDrive({
      image: car_smooth,
      folder: out_dir,
      scale:10,
      description: feature_name_smooth,
      region: feat_sub,
      fileFormat: 'GeoTIFF',
      // formatOptions: {
      //   cloudOptimized: true
      // },
        maxPixels:  1e13
    })
  
    // Loop through different scales
    for(var z=0; z < scale_n; z++) {
      var scale_size = scale_list.get(z)
      var scale_export_name = 'poly' + feature_name + '_scale'  + scale_list_str.get(z).getInfo()
  }
}


// ------------------------ OPTIONAL: VISUALIZE CARI POLYGONS --------------------------


//// Add CARI Layers to map for visual analysis
// Map.addLayer(rocky.filterBounds(area_bound), {color: 'black'}, "rocky_bound", false )
// Map.addLayer(beaches, {color: 'blue'}, "beaches_bound", false )
// Map.addLayer(estuarine, {color: 'yellow'}, "est_bound", false )
// Map.addLayer(dune, {color: 'green'}, "dune_bound", false )
// Map.addLayer(rocky, {color: 'red'}, "rocky_bound_red", false )

// Center map
Map.centerObject(coast_bound, 12) 